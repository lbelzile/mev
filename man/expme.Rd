% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mgplikelihoods.R
\name{expme}
\alias{expme}
\title{Exponent measure for multivariate generalized Pareto distributions}
\usage{
expme(z, par, model = c("log", "hr", "br", "xstud"),
  method = c("TruncatedNormal", "mvtnorm", "mvPot"))
}
\arguments{
\item{z}{vector at which to estimate exponent measure}

\item{par}{list of parameters}

\item{model}{string indicating the model family}

\item{method}{string indicating the package from which to extract the numerical integration routine}
}
\value{
numeric giving the measure of the complement of \eqn{[0,z]}.
}
\description{
Integrated intensity over the region defined by \eqn{[0, z]^c} for logistic, Huesler-Reiss, Brown-Resnick and extremal Student processes.
}
\note{
The list \code{par} must contain different arguments depending on the model. For the Brown--Resnick model, the user must supply the conditionally negative definite matrix \code{Lambda} following the parametrization in Engelke \emph{et al.} (2015) or the covariance matrix \code{Sigma}, following Wadsworth and Tawn (2014). For the Husler--Reiss model, the user provides the mean and covariance matrix, \code{m} and \code{Sigma}. For the extremal student, the covariance matrix \code{Sigma} and the degrees of freedom \code{df}. For the logistic model, the strictly positive dependence parameter \code{alpha}.
}
\examples{
\dontrun{
# Extremal Student
Sigma <- stats::rWishart(n = 1, df = 20, Sigma = diag(10))[, , 1]
expme(z = rep(1, ncol(Sigma)), par = list(Sigma = cov2cor(Sigma), df = 3), model = "xstud")
# Brown-Resnick model
D <- 5L
loc <- cbind(runif(D), runif(D))
di <- as.matrix(dist(rbind(c(0, ncol(loc)), loc)))
semivario <- function(d, alpha = 1.5, lambda = 1) {
  (d / lambda)^alpha
}
Vmat <- semivario(di)
Lambda <- Vmat[-1, -1] / 2
expme(z = rep(1, ncol(Lambda)), par = list(Lambda = Lambda), model = "br", method = "mvPot")
Sigma <- outer(Vmat[-1, 1], Vmat[1, -1], "+") - Vmat[-1, -1]
expme(z = rep(1, ncol(Lambda)), par = list(Lambda = Lambda), model = "br", method = "mvPot")
}
}
